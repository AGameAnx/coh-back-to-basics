import("util/demand.ai")

strategy_command_tree = {}

--------------------------------------------------------------------------------

function strategy_command_tree.trace(msg)
	local ticks = World_GetGameTime() * 8
	-- pipe this out also
	msg = "[" .. ticks .. "]" .. msg

	aitrace_ext("Commander_Tree_Strategy", msg)
end

function strategy_command_tree.trace_clear()
	aitraceclear_ext("Commander_Tree_Strategy")
end

--------------------------------------------------------------------------------

function strategy_command_tree:init()
	--print("strategy_command_tree:init")
end

function GetCommandTreeIndexFromUPGID(upgradePBG)
	if upgradePBG==nil then
		return -1 -- error
	end
	
	local treeCount = CommandTree_Count(s_selfplayer)
	
	local pbgid = BP_GetID(upgradePBG)
	
	for ti=0,treeCount-1 do
		local upgradePBG = CommandTree_GetMainUpgrade(s_selfplayer, ti)
		if (BP_GetID(upgradePBG) == pbgid) then
			return ti
		end
	end
	
	return -1 -- error
end

function strategy_command_tree:choose_initial_tree()
	local treeCount = CommandTree_Count(s_selfplayer)
	
	-- do this even with zero - pts (would put this in init, but PBG_GetCount isn't updated yet)
	--print("Searching for command tree")
	for ti=0,treeCount-1 do
		local upgradePBG = CommandTree_GetMainUpgrade(s_selfplayer, ti)
		if (PBG_GetCount(s_selfplayer, upgradePBG) > 0) then
			return ti, upgradePBG
		end
	end
	
	local upgradePBG = nil
	local newChosenTreeIdx = nil
	local prefPath = nil
	
	-- get the personality we chose at the beginning
	if s_personality.command_tree_pref_tbl and s_personality.command_tree_pref_tbl.main then
		upgradePBG = s_personality.command_tree_pref_tbl.main
		local treeIndex = GetCommandTreeIndexFromUPGID(upgradePBG)
		if treeIndex ~= -1 then
			--print("CommandTree: Prefs chose index "..treeIndex)
			newChosenTreeIdx = treeIndex
			prefPath = AI_RandMax(table.getn(s_personality.command_tree_pref_tbl.choices))+1
		end
	end
	
	if newChosenTreeIdx==nil then
		newChosenTreeIdx = AI_RandMax(treeCount-1)
		--print("Randomly chosing command tree:"..newChosenTreeIdx)
		upgradePBG = CommandTree_GetMainUpgrade(s_selfplayer, newChosenTreeIdx)
	end
	
	if upgradePBG~= nil and AIProduction_CanProduceNow(s_selfplayer, PITEM_PlayerUpgrade, upgradePBG, DEFAULT_HERO_ID) then
		Request_Production(s_selfplayer, TGROUP_CommandTree, TPRIORITY_CommandTree, PITEM_PlayerUpgrade, upgradePBG, DEFAULT_HERO_ID)
		-- this is our chosen tree
		return newChosenTreeIdx, upgradePBG, prefPath
	end
	
	--print("ERROR could not find command tree!!!")
end

function strategy_command_tree:do_purchase()
	if self.chosenTreeIdx == nil then
		local chosenIndex, upgradePBG, prefPath = self:choose_initial_tree()
		if chosenIndex ~= nil then
			self.chosenTreeIdx = chosenIndex
			self.prefIndexChosen = prefPath
			--strategy_command_tree.trace("Found command tree:"..chosenIndex)
			--print("Chose command tree:"..BP_GetName(upgradePBG))
			s_player_ability_list = GetPlayerAbilityTable(s_current_race, upgradePBG)
		--else
			--strategy_command_tree.trace("No command tree chosen!")
			--print("NO COMMAND TREE CHOSEN!")
		end
	end
	
	-- check to see if we have a commandpoint to spend
	local commandResource = AIResource_GetCurrentResources(s_selfplayer).command
	if commandResource == 0 then
		--strategy_command_tree.trace("No command points to spend")
		--aipoptrace()
		return
	end
	
	--local treeCount = CommandTree_Count(s_selfplayer)
	
	-- if we are following a pref-tree then lets try it
	if self.prefIndexChosen then
		local pref_tbl = s_personality.command_tree_pref_tbl.choices[self.prefIndexChosen]
		if pref_tbl then
			local count = table.getn(pref_tbl)
			if commandResource >= 5 then
				CustomDebug.Print('ERROR: Command tree path reached 5 CP - invalid tech route! Path index: '..self.prefIndexChosen..', path upgrades:')
				self.prefIndexChosen = nil
				for i=1,count do
					local command_item = pref_tbl[i]
					CustomDebug.Print('  '..BP_GetName(command_item))
				end
			else
				local prefcount = 0
				-- run through the choice table in order, making sure we have each
				for i=1,count do
					-- count the total number of these items, including those that have been requested but not active
					local command_item = pref_tbl[i]
					local upg_count = UtilPBG_CountTotal(command_item)
					if upg_count <= 0 then
						if AIProduction_CanProduceNow(s_selfplayer, PITEM_PlayerUpgrade, command_item, DEFAULT_HERO_ID) then
							prefcount = prefcount + 1
							Request_Production(s_selfplayer, TGROUP_CommandTree, TPRIORITY_CommandTree, PITEM_PlayerUpgrade, command_item, DEFAULT_HERO_ID)
							--strategy_command_tree.trace("CommandTree: Produce:"..BP_GetName(command_item))
						else
							--strategy_command_tree.trace("CommandTree: COULD NOT PRODUCE PREF:"..BP_GetName(command_item))
							return
						end
						--aipoptrace();
					else
						prefcount = prefcount + 1
					end
				end
				if prefcount >= count then
					--strategy_command_tree.trace("CommandTree: Done with all pref choices")
					--aipoptrace();
					self.prefIndexChosen = nil
				else
					return
				end
			end
		else
			CustomDebug.Print('Command tree path error')
			self.prefIndexChosen = nil
		end
	end
	
	if self.chosenTreeIdx ~= nil then
		local ct_count = CommandTree_GetItemCount(s_selfplayer, self.chosenTreeIdx)-1
		
		for ci=0,ct_count do
			local command_item = CommandTree_GetItemAt(s_selfplayer, self.chosenTreeIdx, ci)
			if command_item ~= nil then			
				--strategy_command_tree.trace("Chosing item from command tree:"..self.chosenTreeIdx)
				
				-- get info about this item (and determine if we want this)
				-- should also get info about goals for this AI (infantry heavy vs tank vs ...)
				
				if AIProduction_CanProduceNow(s_selfplayer, PITEM_PlayerUpgrade, command_item, DEFAULT_HERO_ID) then
					Request_Production(s_selfplayer, TGROUP_CommandTree, TPRIORITY_CommandTree, PITEM_PlayerUpgrade, command_item, DEFAULT_HERO_ID)
					
					--strategy_command_tree.trace("CommandTree: Produce:"..BP_GetName(command_item))
					--aipoptrace();
					return
				--else
					--strategy_command_tree.trace("CommandTree: CANNOT Produce:"..BP_GetName(command_item))
				end
			end
		end
	end
end
