
-- what rating of units does the AI have already?
self_classid = {0,35,0,0,0}
self_anticlassid = {0,0,0,0,0}

-- AI SQUADS TO CHECK DEMAND
AI_squad = {
{name="HMG",class={[0]=0,[1]=2,[2]=0,[3]=0,[4]=0}, anticlass={[0]=0,[1]=9,[2]=0,[3]=0,[4]=0}},
{name="SNIPER",class={[0]=0,[1]=4,[2]=0,[3]=0,[4]=0}, anticlass={[0]=0,[1]=10,[2]=0,[3]=0,[4]=0}},
{name="JEEP",class={[0]=0,[1]=0,[2]=6,[3]=0,[4]=0}, anticlass={[0]=0,[1]=3,[2]=1,[3]=0,[4]=0.5}},
{name="TANK",class={[0]=20,[1]=0,[2]=0,[3]=0,[4]=0}, anticlass={[0]=10,[1]=5,[2]=15,[3]=10,[4]=30}},
}

-- ENEMY SQUADS
enemy_squads = {
{class={[0]=0,[1]=6,[2]=0,[3]=0,[4]=0}, anticlass={[0]=0,[1]=3,[2]=0,[3]=0,[4]=0}, count=5},
{class={[0]=0,[1]=1,[2]=0,[3]=0,[4]=0}, anticlass={[0]=0,[1]=10,[2]=0,[3]=0,[4]=0}, count=2},
{class={[0]=0,[1]=0,[2]=6,[3]=0,[4]=0}, anticlass={[0]=0,[1]=0,[2]=1,[3]=0,[4]=0.5}, count=0},
{class={[0]=20,[1]=0,[2]=0,[3]=0,[4]=0}, anticlass={[0]=30,[1]=20,[2]=30,[3]=0,[4]=0.5}, count=0},
}



------------------------------------------------
------------------------------------------------
s_self_modplayer = "selfplayer"
s_selfplayer = "selfplayer"

enemy_classid = {0,0,0,0,0}
enemy_anticlassid = {0,0,0,0,0}

function CreateEnemyRatings(squads)
	
	for i=0,3 do
		enemy_classid[i+1] = 0
		enemy_anticlassid[i+1] = 0
	end
	
	for k,v in pairs(squads) do
		for i=0,3 do
			enemy_classid[i+1] = enemy_classid[i+1] + v.class[i] * v.count
			enemy_anticlassid[i+1] = enemy_anticlassid[i+1] + v.anticlass[i] * v.count
		end
	end
--~ 	
--~ 	print(string.format("ECL:%.1f|%.1f|%.1f|%.1f",
--~ 			enemy_classid[1],enemy_classid[2],enemy_classid[3],enemy_classid[4]))
--~ 	print(string.format("ECA:%.1f|%.1f|%.1f|%.1f",
--~ 			enemy_anticlassid[1],enemy_anticlassid[2],enemy_anticlassid[3],enemy_anticlassid[4]))
end

CreateEnemyRatings(enemy_squads)

----------------STUB FUNCTIONS--------------
function aitrace(str)
	print(str)
end
function purchase_trace(str)
	print(str)
end

function AI_GetPlayer()
	return "selfplayer"
end

function PlayerStats_GetTotalSquadClassRating(enemyid, cid)
	if (enemyid == "selfplayer") then
		return self_classid[cid+1]
	else
		return enemy_classid[cid+1]
	end
end
function PlayerStats_GetTotalSquadAntiClassRating(enemyid, cid)
	if enemyid == "selfplayer" then
		return self_anticlassid[cid+1]
	else	
		return enemy_anticlassid[cid+1]
	end
end

function PlayerStats_GetTotalHistoryAntiClassRating(enemyid, cid)
	return 0
end

function Task_GetInTaskAntiClassRating(a,b)
	return 0
end

function Task_GetInTaskClassRating(self, cid)
	return 0
end

function AI_GetUnitClassCount()
	return 4
end

function AI_GetUnitClassAt(cid)
	return "debug"
end

function AI_GetUnitClassID(str)

	if (str == "aiclass_heavy_vehicle") then
		return 0
	end
	if (str == "aiclass_infantry") then
		return 1
	end
	if (str == "aiclass_light_vehicle") then
		return 2
	end
	if (str == "aiclass_medium_vehicle") then
		return 3
	end	
	if (str == "aiclass_structure") then
		return 4
	end
end

dofile("demand.ai")
dofile("army_eval.ai")

ResetDemand()

Demand_EnemyClassDemand("enemy")
Demand_EnemyAntiClassDemand("enemy")
--Demand_Normalize()

--Demand_SelfClassDemand()
--Demand_SelfAntiClassDemand()

--IncAntiClassDemand(3, 100)

print(string.format("FINAL CLASS DEMAND:%.1f|%.1f|%.1f|%.1f|%.1f",
		GetClassDemand(0), GetClassDemand(1), GetClassDemand(2), GetClassDemand(3), GetClassDemand(4)))
print(string.format("FINAL ANTICLASS DEMAND:%.1f|%.1f|%.1f|%.1f|%.1f",
		GetAntiClassDemand(0), GetAntiClassDemand(1), GetAntiClassDemand(2), GetAntiClassDemand(3), GetAntiClassDemand(4)))
		
		
for k,v in pairs(AI_squad) do
	local demand, c_demand, ac_demand = CalcSquadDemandFromRating(v.class, v.anticlass)
	print(string.format("%s : %.1f Class:%.1f AClass:%.1f", v.name, demand, c_demand, ac_demand))
end
