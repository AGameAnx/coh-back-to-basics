
--- list of all the counting functions and some helpers

-- This returns the number of this pbg alive AND being produced (also counts those already sent over the network, or in-proxy)
-- PBG_GetCount(s_selfplayer, pbg)

-- This returns the number of inactive requested tasks for this pbg. These are not alive or being produced yet.
-- Task_CountActivePBG(s_selfplayer, pbg, false)

-- This returns the number of 'active' tasks for this pbg. These PBGs are going to be in production very shortly.
-- Task_CountActivePBG(s_selfplayer, pbg, true)

-- Returns the number of alive units in the world

local pbgCache_countAlive = {}
local pbgCache_countAliveOrProduced = {}
local pbgCache_countBeingRequested = {}
local pbgCache_countTotal = {}

function UtilPBF_ClearCache()
	pbgCache_countAlive = {}
	pbgCache_countAliveOrProduced = {}
	pbgCache_countBeingRequested = {}
	pbgCache_countTotal = {}
end

function UtilPBG_CountAlive(pbg)
	if pbg == nil then return 0 end
	if pbgCache_countAlive[pbg] then return pbgCache_countAlive[pbg] end
	local count = PBG_GetCount(s_selfplayer, pbg)
	pbgCache_countAlive[pbg] = count
	return count
end

-- Returns the number of alive and in production (task is ON)
-- This is often used when looking at units/upgrades for purchasing a different unit (eg. build barracks if we have zero quartermasters alive or being produced)
function UtilPBG_CountAliveOrProduced(pbg)
	if pbg == nil then return 0 end
	if pbgCache_countAliveOrProduced[pbg] then return pbgCache_countAliveOrProduced[pbg] end
	local count = PBG_GetCount(s_selfplayer, pbg) + Task_CountActivePBG(s_selfplayer, pbg, true)
	pbgCache_countAliveOrProduced[pbg] = count
	return count
end

-- Returns only the units that are being requested at this time but not in production (are OFF)
function UtilPBG_CountBeingRequested(pbg)
	if pbg == nil then return 0 end
	if pbgCache_countBeingRequested[pbg] then return pbgCache_countBeingRequested[pbg] end
	local count = Task_CountActivePBG(s_selfplayer, pbg, false)
	pbgCache_countTotal[pbg] = count
	return count
end

function UtilPBG_CountTotal(pbg)
	if pbg == nil then return 0 end
	if pbgCache_countTotal[pbg] then return pbgCache_countTotal[pbg] end
	local count = PBG_GetCount(s_selfplayer, pbg) + Task_CountActivePBG(s_selfplayer, pbg, nil)
	pbgCache_countTotal[pbg] = count
	return count
end
