
-- Hold
function TacticFilter_Hold(squad)
	local sim_squad = AISquad_ConvertToSimSquad(squad)
	local fullLoadout = Squad_GetMax(sim_squad)
	local unitsLeft = Squad_Count(sim_squad)
	local healthLeftPercentage = Squad_GetHealthPercentage(sim_squad)
	return healthLeftPercentage > 0.3 and not ((fullLoadout > 1 and unitsLeft == 1) or (fullLoadout == 1 and healthLeftPercentage < 0.4))
end
function TacticDemand_Hold(squad, near_e, near_s)
	local hold_ent = EntityTargetFilter_FirstHold(squad, near_e)
	if hold_ent == nil then return -99999 end
	
	local sim_squad = AISquad_ConvertToSimSquad(squad)
	local enemyCount = CountEnemySquads(near_s)
	
	local fullLoadout = Squad_GetMax(sim_squad)
	local unitsLeft = Squad_Count(sim_squad)
	local healthLeftPercentage = Squad_GetHealthPercentage(sim_squad)
	
	-- if we're really close to the building, up the demand significantly
	local distSqr = World_DistanceSquaredPointToPoint(AISquad_GetAnchorPos(squad), Entity_GetPosition(hold_ent))
	
	local minRange = 1
	local maxRange = misc_taskAP*misc_taskAP/25
	
	-- clamp over some range
	if distSqr < minRange then distSqr = minRange end
	if distSqr > maxRange then distSqr = maxRange end
	
	-- linearly increase demand with close distance
	local result = 20 * (maxRange - distSqr) / (maxRange - minRange)
	
	result = result / (enemyCount/4 + 1)
	
	-- emplacements (esp. slit trenches) are really important
	if Entity_IsOfType(hold_ent, "defence_building") then result = result + 6 end
	
	if is_friendly_entity(hold_ent) then result = result - 10 end
	
	if get_first_enemy_hmg_squad(near_s) ~= nil then result = result + 5 end
	
	local sg = SGroup_CreateIfNotFound("hold_demand_dummy")
	if Entity_GetSquadsHeld(hold_ent, sg) then result = result - 25 end
	SGroup_Destroy(sg)
	
	if Squad_IsInHoldEntity(sim_squad) then
		if TacticFilter_Retreat(squad) then result = result - 120
		else result = result + 15 end
		if enemyCount == 0 then result = result - 20 end
		if Squad_IsUnderAttack(sim_squad, 5) then result = result + 3 end
		if Squad_IsAttacking(sim_squad, 5) then result = result + 5 end
	else
		if Squad_IsUnderAttack(sim_squad, 5) then result = result - 20 end
		if Squad_IsAttacking(sim_squad, 5) then result = result - 10 end
	end
	
	return result*100-15 - Entity_GetHealthPercentage(hold_ent)*50 + math.min(0, (Entity_GetHealth(hold_ent)-300)*10)
end
function TacticDemand_HoldHMG(squad, near_e, near_s)
	local hold_ent = EntityTargetFilter_FirstHold(squad, near_e)
	if hold_ent == nil then return -99999 end
	
	local sim_squad = AISquad_ConvertToSimSquad(squad)
	
	local fullLoadout = Squad_GetMax(sim_squad)
	local unitsLeft = Squad_Count(sim_squad)
	local healthLeftPercentage = Squad_GetHealthPercentage(sim_squad)
	
	-- if we're really close to the building, up the demand significantly
	local distSqr = World_DistanceSquaredPointToPoint(AISquad_GetAnchorPos(squad), Entity_GetPosition(hold_ent))
	
	local minRange = 5
	local maxRange = misc_taskAP*misc_taskAP
	
	-- clamp over some range
	if distSqr < minRange then distSqr = minRange end
	if distSqr > maxRange then distSqr = maxRange end
	
	-- linearly increase demand with close distance
	local result = 20 * (maxRange - distSqr) / (maxRange - minRange)
	
	result = result / (CountEnemySquads(near_s)/4 + 1)
	
	-- emplacements (esp. slit trenches) are really important
	if Entity_IsOfType(hold_ent, "defence_building") then result = result + 6 end
	
	if is_friendly_entity(hold_ent) then result = result - 10 end
	
	if get_first_enemy_hmg_squad(near_s) ~= nil then result = result + 5 end
	
	local sg = SGroup_CreateIfNotFound("hold_demand_dummy")
	if Entity_GetSquadsHeld(hold_ent, sg) then result = result - 10 end
	SGroup_Destroy(sg)
	
	if Squad_IsInHoldEntity(sim_squad) then
		if TacticFilter_Retreat(squad) then result = result - 80
		else result = result + 120 end
		if Squad_IsUnderAttack(sim_squad, 5) then result = result + 5 end
		if Squad_IsAttacking(sim_squad, 5) then result = result + 30 end
	else
		if Squad_IsUnderAttack(sim_squad, 5) then result = result - 10 end
		if Squad_IsAttacking(sim_squad, 5) then result = result - 5 end
	end
	
	return result*1500-15 - Entity_GetHealthPercentage(hold_ent)*500 + (Entity_GetHealth(hold_ent)-300)*120
end

-- Marksman shot
function EntityTargetFilter_MarksmanShot(squad, target_entities)
	local bestEntity = EntityTargetFilter_MarksmanShot1(squad, target_entities)
	if bestEntity then return bestEntity end
	local squadEntity
	local squadEntityDistance
	local count = EGroup_CountSpawned(target_entities)
	for i=1, count do
		local target_entity = EGroup_GetSpawnedEntityAt(target_entities, i)
		local squad = Entity_GetSquad(target_entity)
		if squad and is_enemy_squad(squad) then
			local distance = World_DistanceSquaredPointToPoint(pos, Entity_GetPosition(target_entity))
			if not squadEntity or distance < squadEntityDistance then
				squadEntity = target_entity
				squadEntityDistance = distance
			end
		end
	end
	return squadEntity
end
function EntityTargetFilter_MarksmanShot1(squad, target_entities)
	local sim_squad = AISquad_ConvertToSimSquad(squad)
	local tempsg = SGroup_Create("Marksman shot temp sg")
	local count = EGroup_CountSpawned(target_entities)
	for i=1, count do
		local target_entity = EGroup_GetSpawnedEntityAt(target_entities, i)
		if not Entity_IsVehicle(target_entity) and Entity_GetSquadsHeld(target_entity, tempsg) then
			local sCount = SGroup_CountSpawned(tempsg)
			local isEnemy = true
			for j=1, sCount do
				local target_squad = SGroup_GetSpawnedSquadAt(tempsg, j)
				if not is_enemy_squad(target_squad) then
					isEnemy = false
					break
				end
				local memberCount = Squad_Count(target_squad)
				if memberCount == 1 then
					SGroup_Destroy(tempsg)
					return target_entity
				end
			end
			if isEnemy then
				local firstHMG = SquadTargetFilter_FirstEnemyHMG(squad, tempsg)
				if firstHMG then
					SGroup_Destroy(tempsg)
					return target_entity
				end
			end
		end
	end
	SGroup_Destroy(tempsg)
	return nil
end
function SquadTargetFilter_MarksmanShot(squad, target_squads)
	local bestSquad = SquadTargetFilter_MarksmanShot1(squad, target_squads)
	if bestSquad then return bestSquad
	else return SquadTargetFilter_FirstEnemyNonVehicle(squad, target_squads)
	end
end
function SquadTargetFilter_MarksmanShot1(squad, target_squads)
	local count = SGroup_CountSpawned(target_squads)
	for i=1, count do
		local target_squad = SGroup_GetSpawnedSquadAt(target_squads, i)
		local memberCount = Squad_Count(target_squad)
		if is_enemy_squad(target_squad) and memberCount == 1 then
			return target_squad
		end
	end
	local firstHMG = SquadTargetFilter_FirstEnemyHMG(squad, target_squads)
	if firstHMG then return firstHMG end
	return nil
end
function TacticDemand_MarksmanShot(squad, near_entities, near_squads)
	local result = CountEnemySquads(near_squads)/3-1.1
	if EntityTargetFilter_MarksmanShot1(squad, near_entities) ~= nil or SquadTargetFilter_MarksmanShot1(squad, near_squads) ~= nil then result = result + 525 end
	return result
end

-- Recon Element Flare
s_NearClumpDistanceCap_Flare = 90+5
function PositionTargetFilter_BestClump_Flare(squad, target_squads)
	local i = AIPlayer_GetFowBestClumpIdx(s_selfplayer, squad, s_NearClumpDistanceCap_Flare)
	if i < 0 then return World_Pos(COORD_INVALID, COORD_INVALID, COORD_INVALID) end
	return AIPlayer_GetClumpPosition(s_selfplayer, i)
end
function TacticDemand_Flare(squad, near_entities, near_squads)
	return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_Flare})
end
function TacticFilter_Flare(squad, near_entities, near_squads)
	local curResources = AIResource_GetCurrentResources(s_selfplayer)
	return curResources.munition > 105
end

-- Grenades
s_NearClumpDistanceCap_Grenade = 20+5
function PositionTargetFilter_BestClump_Grenade(squad)
	local sim_squad = AISquad_ConvertToSimSquad(squad)
	local selfPos = Squad_GetPosition(sim_squad)
	local sg = SGroup_CreateIfNotFound('tactics_grenadepos')
	SGroup_Clear(sg)
	World_GetSquadsNearPoint(s_self_modplayer, sg, selfPos, s_NearClumpDistanceCap_Grenade, OT_Enemy)
	local closestDist = s_NearClumpDistanceCap_Grenade+5
	local closestSquad = nil
	for i=1,SGroup_CountSpawned(sg) do
		local s = SGroup_GetSpawnedSquadAt(sg, i)
		local isVehicle = false
		for j=0,Squad_Count(s)-1 do
			local entity = Squad_EntityAt(s, j)
			if Entity_IsVehicle(entity) then
				isVehicle = true
				break
			end
		end
		if not isVehicle and not Squad_IsMoving(s) then
			local pos = Squad_GetPosition(s)
			local dist = World_DistancePointToPoint(selfPos, pos)
			if dist < closestDist then
				closestDist = dist
				closestSquad = s
			end
		end
	end
	SGroup_Destroy(sg)
	if closestSquad then
		return Squad_GetPosition(closestSquad)
	else
		return World_Pos(COORD_INVALID, COORD_INVALID, COORD_INVALID)
	end
	--local i = AIPlayer_GetFowBestClumpIdx(s_selfplayer, squad, s_NearClumpDistanceCap_Grenade)
	--if i < 0 then
	--	return World_Pos(COORD_INVALID, COORD_INVALID, COORD_INVALID)
	--end
	--return AIPlayer_GetClumpPosition(s_selfplayer, i)
end
function TacticDemand_NearEnemyClump_Assault(squad, near_entities, near_squads)
	local result = TacticDemand_NearEnemyClump_Grenade(squad, near_entities, near_squads)
	return result - AI_RandRange(1,5)
end
function TacticDemand_NearEnemyClump_Grenade(squad, near_entities, near_squads)
	local sim_squad = AISquad_ConvertToSimSquad(squad)
	local fullLoadout = Squad_GetMax(sim_squad)
	local unitsLeft = Squad_Count(sim_squad)
	local result = -CountEnemySquads(near_squads)
	
	local healthLeftPercentage = Squad_GetHealthPercentage(sim_squad)
	
	result = result - (1 - healthLeftPercentage) - (1 - unitsLeft/fullLoadout)
	
	if have_clumps_near_range(squad, s_NearClumpDistanceCap_Grenade) then result = result + 2 end
	if get_first_enemy_hmg_squad(near_squads) ~= nil then
		result = result + 1
	elseif EntityTargetFilter_FirstGarrisoned(squad, near_entities) ~= nil then
		result = result + 1.5
	end
	return result
end

-- Suppresson fire
s_NearClumpDistanceCap_SuppressonFire = 45
function TacticDemand_NearEnemyClump_SuppressonFire(squad, near_entities, near_squads)
	return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_SuppressonFire})
end

-- Follow
function Squad_HasTeamWeapon(squad)
	for n=1,Squad_Count(squad) do
		if Entity_IsSyncWeapon(Squad_EntityAt(squad, n-1)) then
			return true
		end
	end
	return false
end
function SquadTargetFilter_Follow(squad, target_squads)
	local playerOwner = Squad_GetPlayerOwner(AISquad_ConvertToSimSquad(squad))
	local count = SGroup_CountSpawned(target_squads)
	for i=1,count do
		local target_squad = SGroup_GetSpawnedSquadAt(target_squads, i)
		if Squad_GetPlayerOwner(target_squad) == playerOwner and
				not SquadQuery_IsVehicle(target_squad) and
				not Squad_IsRetreating(target_squad) and
				not Squad_HasTeamWeapon(target_squad) and
				not Squad_IsInHoldSquad(target_squad) and
				not Squad_IsInHoldEntity(target_squad) and
				Squad_GetMax(target_squad) > 1 and
				Squad_Count(target_squad) > 3 then
			return target_squad
		end
	end
end
function TacticDemand_Follow(squad, near_e, near_s)
	return TacticDemand_NearTarget(squad, nil, near_s, nil, SquadTargetFilter_FirstFriendlyNonVehicle)*100-s_demand_increment*100
end
function TacticDemand_FollowArmor(squad, near_e, near_s)
	return TacticDemand_NearTarget(squad, nil, near_s, nil, SquadTargetFilter_FirstFriendlyVehicle)*100-s_demand_increment*100
end
function TacticDemand_FollowLow(squad, near_e, near_s)
	return TacticDemand_NearTarget(squad, nil, near_s, nil, SquadTargetFilter_FirstFriendlyNonVehicle)*5-s_demand_increment*5
end
function TacticDemand_FollowArmorLow(squad, near_e, near_s)
	return TacticDemand_NearTarget(squad, nil, near_s, nil, SquadTargetFilter_FirstFriendlyVehicle)*5-s_demand_increment*5
end
function TacticFilter_Follow(squad)
	local sim_squad = AISquad_ConvertToSimSquad(squad)
	if sim_squad == nil then return false end
	--if Squad_IsUnderAttack(sim_squad, 5) then
	
	return not Squad_IsDoingAbility(sim_squad, ABILITY.FOLLOW) and
		not Squad_IsDoingAbility(sim_squad, ABILITY.CW.LIEUTENANT_FOLLOW) and
		not Squad_IsDoingAbility(sim_squad, ABILITY.CW.CAPTAIN_FOLLOW) and
		not Squad_IsDoingAbility(sim_squad, ABILITY.CW.COMMANDTANK_FOLLOW) and
		not Squad_IsDoingAbility(sim_squad, ABILITY.ELITE.MUNITIONPANZER_FOLLOW) and
		not Squad_IsDoingAbility(sim_squad, ABILITY.ALLIES.ARMOREDINFANTRY_FOLLOW)
end

-- Retreat
function TacticDemand_Retreat(squad, near_e, near_s)
	local sim_squad = AISquad_ConvertToSimSquad(squad)
	local anchor_pos = AISquad_GetAnchorPos(squad)
	if sim_squad == nil then return false end
	
	local result = -0.12
	
	local fullLoadout = Squad_GetMax(sim_squad)
	local unitsLeft = Squad_Count(sim_squad)
	local unitLeftRatio = unitsLeft/fullLoadout
	if unitsLeft < fullLoadout then
		if AI_RandRange(0, 1000) == 1 then result = result + 20 end
		if unitsLeft > 2 then result = result - unitsLeft/1.5 end
	else
		result = result - 2
		if unitsLeft == 1 then result = result - 8 end -- leader units
	end
	if unitLeftRatio < 0.45 then
		result = result + 5
	else
		result = result + 5*(0.7-unitLeftRatio)
	end
	
	--local maxHealth = Squad_GetHealthMax(sim_squad)
	local healthLeft = Squad_GetHealth(sim_squad)
	local healthLeftPercentage = Squad_GetHealthPercentage(sim_squad)
	result = result + 3.5*math.max(0, 0.925-healthLeftPercentage)
	
	if Squad_IsInHoldEntity(sim_squad) then
		result = result - 2
		if Squad_IsUnderAttack(sim_squad, 5) then
			if Squad_Count(sim_squad) == 1 then result = result + 1.75 end
			result = result + 0.5
			if healthLeftPercentage < 0.275 or healthLeft < 70 then
				result = result + 5
			end
			result = result + math.max(0, math.min((90-healthLeft)/11, 5))
		end
		if Squad_IsAttacking(sim_squad, 5) then
			result = result - 2
		end
	else
		if Squad_IsUnderAttack(sim_squad, 5) then
			if Squad_Count(sim_squad) == 1 then result = result + 1.75 end
			result = result + 0.25
			if healthLeftPercentage < 0.275 or healthLeft < 80 then
				result = result + 5
			end
			result = result + math.max(0, math.min((90-healthLeft)/11, 5))
		end
		if Squad_IsAttacking(sim_squad, 5) then result = result - 0.45 end
	end
	
	if AIPlayer_IsFireConePosition(s_selfplayer, anchor_pos) then result = result + 1.5 end
	if Squad_IsPinned(sim_squad) then result = result + 2.5 end
	
	local closestEnemyDistace
	local enemyCount = 0
	local friendlyCount = 0
	for i=1,table.getn(near_s) do
		if is_enemy_squad(near_s[i]) then
			if is_not_vehicle(near_s[i]) then
				enemyCount = enemyCount + Squad_Count(near_s[i])
			else
				if Squad_GetHealthMax(near_s[i]) > 300 then
					enemyCount = enemyCount + 2
				end
				enemyCount = enemyCount + Squad_GetHealth(near_s[i])/100
			end
			local dist = World_DistanceSquaredPointToPoint(anchor_pos, Squad_GetPosition(near_s[i]))
			if not closestEnemyDistace or closestEnemyDistace > closestEnemyDistace then
				closestEnemyDistace = dist
			end
		else
			if is_not_vehicle(near_s[i]) then
				friendlyCount = friendlyCount + Squad_Count(near_s[i])
			else
				if Squad_GetHealthMax(near_s[i]) > 300 then
					friendlyCount = friendlyCount + 2
				end
				friendlyCount = friendlyCount + Squad_GetHealth(near_s[i])/100
			end
		end
	end
	
	if closestEnemyDistace and closestEnemyDistace < 400 then
		result = result + (420-closestEnemyDistace)/100
	end
	
	result = result + enemyCount/4.5 - math.min(friendlyCount, enemyCount)/5.75
	
	return math.max(0, result)*20000
end
function TacticFilter_Retreat(squad)
	return false -- this is handled in a script now (aicontrol.scar)
	
	--[[local sim_squad = AISquad_ConvertToSimSquad(squad)
	if sim_squad == nil then return false end
	if not Squad_IsUnderAttack(sim_squad, 5) then
		return false
	end
	
	local result = -1.20
	
	local fullLoadout = Squad_GetMax(sim_squad)
	local unitsLeft = Squad_Count(sim_squad)
	if unitsLeft == 1 then result = result + 0.4 end
	local unitLeftRatio = unitsLeft/fullLoadout
	if unitsLeft < fullLoadout and AI_RandRange(0, 1000) == 1 then
		result = result + 20
	end
	if unitLeftRatio < 0.52 then
		result = result + 4
	else
		result = result + 4*(0.7-unitLeftRatio)
	end
	
	local pop = Player_GetCurrentPopulation(s_self_modplayer, CT_Personnel)
	local popcap = Player_GetMaxPopulation(s_self_modplayer, CT_Personnel)
	local popleft = popcap-pop
	if popleft <= 7 and fullLoadout ~= 1 then -- Special rules for retreating when we're near popcap
		if Squad_GetVeterancyRank(sim_squad) <= 1 then
			if (popleft <= 3 and unitsLeft <= 3) or
					unitsLeft == 1 then
				return false
			end
		end
		result = result - 1
	end
	
	--local maxHealth = Squad_GetHealthMax(sim_squad)
	local healthLeft = Squad_GetHealth(sim_squad)
	local healthLeftPercentage = Squad_GetHealthPercentage(sim_squad)
	result = result + 4*math.max(0, 0.95-healthLeftPercentage)
	
	if Squad_IsInHoldEntity(sim_squad) then
		result = result - 2
		if Squad_IsUnderAttack(sim_squad, 5) then
			if unitsLeft == 1 then
				result = result + 1.75
			end
			result = result + 0.5
			if healthLeftPercentage < 0.35 or healthLeft < 70 then
				result = result + 5
			end
			result = result + math.max(0, math.min((90-healthLeft)/11, 5))
		end
		if Squad_IsAttacking(sim_squad, 5) then
			result = result - 2
		end
	else
		if Squad_IsUnderAttack(sim_squad, 5) then
			if unitsLeft == 1 then
				result = result + 1.75
			end
			result = result + 0.25
			if healthLeftPercentage < 0.35 or healthLeft < 80 then
				result = result + 5
			end
			result = result + math.max(0, math.min((90-healthLeft)/11, 5))
		end
		if Squad_IsAttacking(sim_squad, 5) then
			result = result - 0.35
		end
	end
	
	return result > 0]]
end

-- PanzerIV
s_NearClumpDistanceCap_PanzerIVRapidFire = 60
function TacticDemand_NearEnemyClump_PanzerIVRapidFire(squad, near_entities, near_squads)
	return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_PanzerIVRapidFire})
end
s_NearClumpDistanceCap_PanzerIVStubbyRapidFire = 60
function TacticDemand_NearEnemyClump_PanzerIVStubbyRapidFire(squad, near_entities, near_squads)
	return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_PanzerIVStubbyRapidFire})
end
function TacticFilter_PanzerIVLockdownDisable(squad)
	return TacticFilter_HealthLow(squad) or not TacticFilter_InCombat(squad)
end

--------------------------------------------------------------------------------------------------------
-- Barrage clump scan functions

function GetArtyPosition(squad, searchDistance, fow)
	if fow == nil then fow = true end
	local sim_squad = AISquad_ConvertToSimSquad(squad)
	local squadPos = AISquad_GetAnchorPos(squad)
	if fow and World_GetRand(1, 5) <= 2 and AIControlArtyPosFOW and World_DistancePointToPoint(squadPos, AIControlArtyPosFOW) < searchDistance then
		return AIControlArtyPosFOW
	elseif AIControlArtyPos and World_DistancePointToPoint(squadPos, AIControlArtyPos) < searchDistance then
		return AIControlArtyPos
	end
	local i = AIPlayer_GetFowBestClumpIdx(s_selfplayer, squad, searchDistance)
	if i < 0 then return World_Pos(COORD_INVALID, COORD_INVALID, COORD_INVALID) end
	local pos = AIPlayer_GetClumpPosition(s_selfplayer, i)
	if not fow or Player_CanSeePosition(Squad_GetPlayerOwner(sim_squad), pos) then
		return pos
	end
	return World_Pos(COORD_INVALID, COORD_INVALID, COORD_INVALID)
end

-- Captain Victor Target
s_NearClumpDistanceCap_CaptainVictorTarget = 45+40
function PositionTargetFilter_BestClump_CaptainVictorTarget(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_CaptainVictorTarget, false) end
function TacticDemand_NearEnemyClump_CaptainVictorTarget(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_CaptainVictorTarget}) end

-- Mortar
s_NearClumpDistanceCap_Mortar = 90
function PositionTargetFilter_BestClump_Mortar(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_Mortar, true) end
function TacticDemand_NearEnemyClump_Mortar(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_Mortar}) end

-- Nebelwerfer
s_NearClumpDistanceCap_Neb = 245
function PositionTargetFilter_BestClump_Neb(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_Neb, true) end
function TacticDemand_NearEnemyClump_Neb(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_Neb})*1000 end

-- Stuka zu Fuss
s_NearClumpDistanceCap_Stuka = 195
function PositionTargetFilter_BestClump_Stuka(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_Stuka, true) end
function TacticDemand_NearEnemyClump_Stuka(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_Stuka})*1000 end

-- Howitzer
s_NearClumpDistanceCap_Howie = 250
function PositionTargetFilter_BestClump_Howie(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_Howie, true) end
function TacticDemand_NearEnemyClump_Howie(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_Howie})*1000 end

-- Allied Howitzer Air Detonation
s_NearClumpDistanceCap_AlliedHowitzerAirDetonation = 225
function PositionTargetFilter_BestClump_AlliedHowitzerAirDetonation(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_AlliedHowitzerAirDetonation, true) end
function TacticDemand_NearEnemyClump_AlliedHowitzerAirDetonation(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_AlliedHowitzerAirDetonation})*1000 -999 end

-- Priest
s_NearClumpDistanceCap_Priest = 225+70
function PositionTargetFilter_BestClump_Priest(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_Priest, true) end
function TacticDemand_NearEnemyClump_Priest(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_Priest})*1000 end

-- Stuka
s_NearClumpDistanceCap_Stuka = 200+70
function PositionTargetFilter_BestClump_Stuka(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_Stuka, true) end
function TacticDemand_NearEnemyClump_Stuka(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_Stuka})*1000 end

-- Calliope
s_NearClumpDistanceCap_Calliope = 175+70
function PositionTargetFilter_BestClump_Calliope(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_Calliope, true) end
function TacticDemand_NearEnemyClump_Calliope(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_Calliope})*1000 end

-- Axis Howitzer
s_NearClumpDistanceCap_AxisHowie = 250
function PositionTargetFilter_BestClump_AxisHowie(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_AxisHowie, true) end
function TacticDemand_NearEnemyClump_AxisHowie(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_AxisHowie}) end

-- Axis Mortar
s_NearClumpDistanceCap_AxisMortar = 90
function PositionTargetFilter_BestClump_AxisMortar(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_AxisMortar, true) end
function TacticDemand_NearEnemyClump_AxisMortar(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_AxisMortar}) end

-- 25 Pounder
s_NearClumpDistanceCap_25Pounder = 240
function PositionTargetFilter_BestClump_25Pounder(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_25Pounder, true) end
function TacticDemand_NearEnemyClump_25Pounder(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_25Pounder})*1000 end

-- 25 Pounder Supercharge
s_NearClumpDistanceCap_25PounderSupercharge = 265
function PositionTargetFilter_BestClump_25PounderSupercharge(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_25PounderSupercharge, true) end
function TacticDemand_NearEnemyClump_25PounderSupercharge(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_25PounderSupercharge})*1000 end

-- 25 Pounder Creeping
s_NearClumpDistanceCap_25PounderCreeping = 225
function PositionTargetFilter_BestClump_25PounderCreeping(squad)
	local pos1
	if AIControlArtyPosFOW and World_DistancePointToPoint(Squad_GetPosition(AISquad_ConvertToSimSquad(squad)), AIControlArtyPosFOW) < s_NearClumpDistanceCap_25PounderCreeping then
		pos1 = AIControlArtyPosFOW
	elseif AIControlArtyPos and World_DistancePointToPoint(Squad_GetPosition(AISquad_ConvertToSimSquad(squad)), AIControlArtyPos) < s_NearClumpDistanceCap_25PounderCreeping then
		pos1 = AIControlArtyPos
	end
	if not pos1 then
		local i = AIPlayer_GetFowBestClumpIdx(s_selfplayer, squad, s_NearClumpDistanceCap_25PounderCreeping)
		if i < 0 then return World_Pos(COORD_INVALID, COORD_INVALID, COORD_INVALID) end
		pos1 = AIPlayer_GetClumpPosition(s_selfplayer, i)
	end
	if (pos1.x ~= COORD_INVALID) then
		local pos_index = AIPlayer_GetNextBestPosClumpIdx(s_selfplayer, pos1, 40)
		
		if (pos_index > 0) then
			return pos1, AIPlayer_GetClumpPosition(s_selfplayer, pos_index)
		end
		
		-- choose random angle
		local rand_angle = AI_RandRange(0, 2*3.14159)
		local xdir = math.sin(rand_angle)*5
		local zdir = math.cos(rand_angle)*5
	
		pos2 = World_Pos(pos1.x+xdir, pos1.y, pos1.z+zdir)
		
		return pos1, pos2
	end
	return AIPlayer_GetClumpPosition(s_selfplayer, i)
end
function TacticDemand_NearEnemyClump_25PounderCreeping(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_25PounderCreeping})*1000 end

-- Churchill AVRE
s_NearClumpDistanceCap_Avre = 50+50
function PositionTargetFilter_BestClump_Avre(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_Avre, false) end
function TacticDemand_NearEnemyClump_Avre(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_Avre})*1000 end

-- CW Priest
s_NearClumpDistanceCap_CWPriest = 225+70
function PositionTargetFilter_BestClump_CWPriest(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_CWPriest, true) end
function TacticDemand_NearEnemyClump_CWPriest(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_CWPriest})*1000 end

-- Priest Creeping
--[[s_NearClumpDistanceCap_PriestCreeping = 225+70
function PositionTargetFilter_BestClump_Creeping(squad)
	local pos1
	if AIControlArtyPosFOW and World_DistancePointToPoint(Squad_GetPosition(AISquad_ConvertToSimSquad(squad)), AIControlArtyPosFOW) < s_NearClumpDistanceCap_PriestCreeping then
		pos1 = AIControlArtyPosFOW
	elseif AIControlArtyPos and World_DistancePointToPoint(Squad_GetPosition(AISquad_ConvertToSimSquad(squad)), AIControlArtyPos) < s_NearClumpDistanceCap_PriestCreeping then
		pos1 = AIControlArtyPos
	end
	if not pos1 then
		local i = AIPlayer_GetFowBestClumpIdx(s_selfplayer, squad, s_NearClumpDistanceCap_PriestCreeping)
		if i < 0 then return World_Pos(COORD_INVALID, COORD_INVALID, COORD_INVALID) end
		pos1 = AIPlayer_GetClumpPosition(s_selfplayer, i)
	end
	if (pos1.x ~= COORD_INVALID) then
		local pos_index = AIPlayer_GetNextBestPosClumpIdx(s_selfplayer, pos1, 40)
		
		if (pos_index > 0) then
			return pos1, AIPlayer_GetClumpPosition(s_selfplayer, pos_index)
		end
		
		-- choose random angle
		local rand_angle = AI_RandRange(0, 2*3.14159)
		local xdir = math.sin(rand_angle)*5
		local zdir = math.cos(rand_angle)*5
	
		pos2 = World_Pos(pos1.x+xdir, pos1.y, pos1.z+zdir)
		
		return pos1, pos2
	end
	return World_Pos(COORD_INVALID, COORD_INVALID, COORD_INVALID)
end
function TacticDemand_NearEnemyClump_Creeping(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_PriestCreeping})*1000 end]]

-- CW Priest Supercharge
s_NearClumpDistanceCap_CWPriestSupercharge = 250+70
function PositionTargetFilter_BestClump_CWPriestSupercharge(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_CWPriestSupercharge, true) end
function TacticDemand_NearEnemyClump_CWPriestSupercharge(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_CWPriestSupercharge})*1000 end

-- CW 25pdr Overwatch
s_NearClumpDistanceCap_25pdrOverwatch = 225
function PositionTargetFilter_BestClump_25pdrOverwatch(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_25pdrOverwatch, true) end
function TacticDemand_NearEnemyClump_25pdrOverwatch(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_25pdrOverwatch})*1000 -999 end

-- CW Mortar
s_NearClumpDistanceCap_CWMortar = 85
function PositionTargetFilter_BestClump_CWMortar(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_CWMortar, true) end
function TacticDemand_NearEnemyClump_CWMortar(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_CWMortar}) end

-- CW Mortar Supercharge
s_NearClumpDistanceCap_CWMortarSupercharge = 100
function PositionTargetFilter_BestClump_CWMortarSupercharge(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_CWMortarSupercharge, true) end
function TacticDemand_NearEnemyClump_CWMortarSupercharge(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_CWMortarSupercharge}) end

-- PE Mortar
s_NearClumpDistanceCap_PEMortar = 90+10
function PositionTargetFilter_BestClump_PEMortar(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_PEMortar, true) end
function TacticDemand_NearEnemyClump_PEMortar(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_PEMortar}) end

-- PE Mortar Incendiary
s_NearClumpDistanceCap_PEMortarIncendiary = 85+10
function PositionTargetFilter_BestClump_PEMortarIncendiary(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_PEMortarIncendiary, true) end
function TacticDemand_NearEnemyClump_PEMortarIncendiary(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_PEMortarIncendiary}) end

-- PE Brute Force Center Mortar
s_NearClumpDistanceCap_PEBFMortar = 100
function PositionTargetFilter_BestClump_PEBFMortar(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_PEBFMortar, true) end
function TacticDemand_NearEnemyClump_PEBFMortar(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_PEBFMortar})*3 end

-- PE Stuka
s_NearClumpDistanceCap_PEStuka = 120+50
function PositionTargetFilter_BestClump_PEStuka(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_PEStuka, true) end
function TacticDemand_NearEnemyClump_PEStuka(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_PEStuka})*1000 end

-- Hummel
s_NearClumpDistanceCap_Hummel = 250+50
function PositionTargetFilter_BestClump_Hummel(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_Hummel, true) end
function TacticDemand_NearEnemyClump_Hummel(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_Hummel})*1000 end

-- Hummel Improved
s_NearClumpDistanceCap_HummelImproved = 300
function PositionTargetFilter_BestClump_HummelImproved(squad) return GetArtyPosition(squad, s_NearClumpDistanceCap_HummelImproved, true) end
function TacticDemand_NearEnemyClump_HummelImproved(squad, near_entities, near_squads) return TacticDemand_Boolean(squad, have_clumps_near_range, {s_NearClumpDistanceCap_HummelImproved})*1000 end
