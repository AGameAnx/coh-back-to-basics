
import('personality/player_ability_defs_coho.ai')
import('personality/player_ability_defs_coh.ai')
import('personality/command_tree_prefs_lib.ai')
import('personality/buildorder_conditions_lib.ai')

------------------------------------------------------------------------------------------------
-- This is the global personality info table, it stores information regarding
-- all systems and can be different per race, per level of difficult,
-- per game type, per map and modified by SP missions to their liking
-- This info is very much like modtuning data
--
-- The goal for this would be to have a hierarchy of personality variables. We could
-- define a small set of variables that in turn set the rest of the personality variables
-- so that they work together. For example: we can have 'aggressiveness', 'tech vs unit rate',
-- 'economic importance', etc. And these in turn would choose the appropriate command-tree,
-- tech tree, rush vars, min/max engineers, attacktimes, etc. And then these values can be
-- optionally overwritten for finer tuned control.
--
-- NOTE: there will still be other variables that don't fit within these generalizations.
------------------------------------------------------------------------------------------------

s_personality =
{
	--------------------------------
	-- build order info
	buildorder = {},                            -- builder order the AI will use

	name = "Default Personality",               -- name of this personality

	defensiveness = 0.1,                        -- how defensive a player this AI is (from 0-1) with 1 being very defensive
	defensiveness_budget_increase = 10,         --
	vp_aggressiveness = 0.75,                   -- how hard will the player go for VP (from 0-1) NOTE: they will still go after them to prevent a loss
	chance_to_occupy = 0.002,                   -- general random factor, how often to occupy (larger the more chance it will happen if it becomes a good choice)
	max_damage = 600,                           -- amount ge friendly units can take before stopping the build order (if significant damage is taken stop the build order and have the AI react accordingly)
	max_time = 60*3,                            -- amount of time that will pass before stopping the build order (if the build order stalls or takes longer than expected, it will end and cease being a bottle-neck)
	
	--------------------------------
	-- company command tree info
	command_tree_pref_tbl = {},                 -- list of preferences this personality has, AI will pick randomly from the list

	--------------------------------
	-- military info
	
	start_attack_time = 0,                      -- when the AI will attack for the first time (minimum)
	start_attack_time_variance = 0,             -- what random variation of time should be added to the start attack time

	default_attack_percentage = 0.55,           -- when attacking what is the default percentage
	max_attack_percentage = 0.90,               -- [0,1] what attack percentage do we never want to go over no matter what
	attack_percentage_increment_per_minute = 0, -- attack percentage increase each minute
	advance_percentage = 1.0,                     -- how much more military we need to advance on an enemy

	fallback_percentage = 0,                    -- how much less military we need to fallback from an enemy (this is a maybe, depending on a random factor)
	fallback_health_percentage = 0,             -- how little health we need for vehicles to fallback (this is a maybe, depending on a random factor)
	fallback_capacity_percentage = 0,           -- how little squad capacity we need for soldiers to fallback (this is a maybe, depending on a random factor)
	fallback_chance = 0,                        -- the chance of falling back within a certain time frame once the above fallback conditions are met
	fallback_chance_reevaluate_ticks = 10,      -- how long to wait before reevaluating whether to fallback
	fallback_health_percentage_always = 0,      -- below this health, the vehicle will ALWAYS fallback

	retreat_capacity_percentage = 0,            -- (0.675) the capacity percentage below which soldier squads will retreat
	retreat_suppressed_percentage = 0,          -- (0.85) if this percent or more of squads in the area are suppressed, the squad will retreat
	retreat_chance = 0  ,                       -- (1.0)
	retreat_chance_reevaluate_ticks = 10,       -- (1)
	
	min_engineers_below_50_owned = 1,           -- how many engineers minimum do we need to have when we have less than 50 of the map
	min_engineers_after_50_owned = 2,           -- how many engineers minimum do we need to have when we have more than 50 of the map

	-- target importance
	-- dictates default targeting behaviour for attack, defend and capture
	importance_fuelPoint = 24,
	importance_victoryPoint = 35, -- this value is calculated dynamically. use vp_aggressiveness in the personality to tune this.
	importance_munitionPoint = 23,
	importance_defence = 25,
	importance_nullPoint = 23,
	importance_hq = 12,
	importance_spawner = 23,
	
	-- These modifiers control how AI manages its fuel if it has an excessive amount of it. The modifier is not applied if manpower is below 150 or fuel is below 15
	tech_good_fuel_ratio_modifier = 7,       -- equation: math.sqrt(math.max(curResources.fuel/math.max(curResources.manpower, 0.1)*modfier, 0.75)
									         -- has to be a bigger number because there's always more manpower than fuel
	unit_good_fuel_ratio_modifier = 9,       -- equation: math.sqrt(math.max(curResources.fuel/math.max(curResources.manpower, 0.1)*modfier, 0.5))
									         -- has to be a bigger number because there's always more manpower than fuel
	unit_good_manpower_ratio_modifier = 1/8, -- equation: math.sqrt(math.max(curResources.manpower/math.max(curResources.fuel, 0.1)*modfier, 0.5))
									         -- has to be a smaller number because there's always more manpower than fuel
	
	--------------------------------
	-- unit purchasing
	demand_variance = 0.15,                     -- how much variance in the demand this personality will overlook (eg. units with a demand of 10 and 12 will both be considered in variances are greater than 0.2)
	eta_unit_wait_time = 38,                    -- how long will AI wait for the unit it wants
	eta_production_wait_time = 6,               -- how long will AI wait for the production item it wants (upgrades,etc)
	eta_structure_wait_time = 400,              -- how long will AI wait for the structure it wants
	eta_squadaddon_wait_time = 5,               -- how long will AI wait for a squad-add (flamethrower, etc)
	min_production_demand_required = -5,        -- production items with demand below this value will be ignored
	min_squadaddon_demand_required = -5,        -- squad addon items with demand below this value will be ignored
	occupy_near_spawner_limit = 120,            -- minimum distance that the AI will require from an existing spawner building before occupying
	occupy_max_active = 1,                      -- max number of ambient occupied buildings the AI will attempt to use
	max_engineers = 5,                          -- max number of engineers you should build
	max_engineers_with_teammates = 5,           -- max number of engineers when their are teammates
	use_military_strength_percentage_cap=false, -- if the military cap should be used
	military_strength_percentage_cap = 1.0,     -- [-N -> N] what percentage of the enemies military should the AI try to stay near
	purchase_delay_pace = 1,                    -- the amount of seconds between purchase choices
	min_military_value_start = -1,              -- used to cap the military_value of the AI, this is the military value the AI is allowed to have without constraint (this grows over time)
	min_military_value_increment_per_minute = 0,-- this is the amount the allowed military_value the AI will increase by every minute (starts at start_attack_time)
	glue_military_percentage = 0,               -- [0,1] if the AI is this much better than the enemy it will stop producing military units
	unit_purchase_selection_range = 5,          -- [1,n] randomly pick a unit from the top N of the sorted unit demand list, 1 means pick the best one all the time
	secure_structure_demand = -3.5,             -- Flat secure structure (observation post) demand
	secure_structure_demand_rand = 4,           -- Randomization for secure structure demand
	
	-- budget ratings
	-- budget levels for each tech level. [5] being in the beginning [1] being highest tech level
	budget_levels = {
		units         = {55, 55, 35, 45, 30},
		tech          = {15, 20, 25, 35, 35},
		addon         = { 5,  5,  5,  5,  5},
		secure        = { 1,  1,  2,  2,  1},
		playerability = {20, 20, 25, 25, 25},
		squadability  = {15, 15, 12, 12, 10}
	},
	
	--------------------------------
	--
	axis_quarter_master_chance = 1,                     -- what percentage chance the axis will build a quartermaster
	axis_quarter_master_infantry_veterancy_demand = 1,  -- modifiers for infantry/support veterancy upgrade
	axis_quarter_master_vehicle_veterancy_demand = 1,   -- modifiers for vehicle/tank veterancy
	mine_preference_demand = -5,                        -- bonus demand given to building allied mines
	phase4_random_wait_time = 140,                      -- the amount of time the AI will wait to purchase phase4 after buying a sturm armormy
	tankdepot_random_wait_time = 120,                   -- the amount of time the AI will wait to purchase tank depot after buying a motorpool

	-- default unit class demand values
	self_demand_class_base_value = {
		2, -- aiclass_heavy_vehicle
		0, -- aiclass_infantry
		0, -- aiclass_light_vehicle
		3, -- aiclass_medium_vehicle
		-1  -- aiclass_structure
	},

	--------------------------------
	-- resourcing/securing
	min_captured_pts_before_securing = 5,    -- how many points should the AI capture before deciding to secure
	max_secured_pts = 3,                     -- how many points max should the AI secure
	default_percentage_to_capture = 1,       -- [0,1] capture percentage to start with (which can then grow if an increment is defined)
	max_percentage_to_capture = 1,           -- [0-1], how much of the map we will stop at capturing
	max_percentage_vp_wanted = 1,            -- [0-1], how many VP points the AI will want to grab
	vp_ticker_warning_level = 250,           -- how many tickers should be left before we start really worrying about them (increasing their priority)
	max_num_capturers = 2,                   -- the max number of capturers we will ever have (used to slow AI pace)
	capture_percentage_growth_start_time = 0,-- the time at which we start to apply the capture percentage growth
	capture_percentage_growth_per_min = 0.0, -- the increase in capture percentage we apply every minute after growth timer expires
	
	--------------------------------
	-- tactics info
	ability_avoidance_percentage = 0.95,       -- what percentage of the time will the AI try to avoid avoidable abilities (artillery)
	tankmove_tactic_enabled = false,         -- is the tankmove tactic enabled
	
	threat_aggressiveness = 0,               -- A direct addition to normal militaryPercentValue (higher value makes AI think it has more units, thus attack into threat more)
	
	-- combat state update
	clump_scan_params =                      -- currently this clump data is used by tactics for targeting
	{
		clump_scan_ticks = 4,
		threat_weighting = 1.0,
		importance_weighting = 0.5,
		must_be_seen = false,
		min_threat = 6
	},
}

function s_personality.trace(msg)
	local ticks = World_GetGameTime() * 8
	-- pipe this out also
	msg = "[" .. ticks .. "]" .. msg

	aitrace_ext("Personality", msg)
end

function s_personality.trace_clear()
	aitraceclear_ext("Personality")
end

-- this loads the proper personality file based on the race, LOD, scenario and some randomness
function s_personality.Create()
	--s_personality.trace("Creating personality file...")
	local diffLevel = AIPlayer_GetDifficultyLevel(s_selfplayer)

	local raceStr
	local diffStr = "hard"

	if (s_current_race == TRACE_ALLIES) then
		raceStr = "allies"
	elseif (s_current_race == TRACE_AXIS) then
		raceStr = "axis"
	elseif (s_current_race == TRACE_ALLIES_COMMONWEALTH) then
		raceStr = "allies_cw"
	elseif (s_current_race == TRACE_AXIS_PANZER_ELITE) then
		raceStr = "axis_pe"
	else
		error("Player has invalid race ".. s_current_race)
	end

	if (diffLevel == AD_Easy) then
		diffStr = "easy"
	elseif (diffLevel == AD_Standard) then
		diffStr = "standard"
	elseif (diffLevel == AD_Hard) then
		diffStr = "hard"
	elseif (diffLevel == AD_Hardest) then
		diffStr = "hardest"
	end

	local personalityFile = "personality/"..raceStr.."/"..diffStr..".ai"

	-- check for AI take-over player type
	local playerInitType = Player_GetAIType(s_self_modplayer)

	-- possible types:
	--AII_None
	--AII_Normal,
	--AII_LocalHumanTakeover,
	--AII_RemoteAITakeover,
	--AII_RemoteHumanTakeover
	if playerInitType == AII_RemoteHumanTakeover then
		personalityFile = "personality/"..raceStr.."/ai_human_takeover.ai"
	end

	--s_personality.trace("Loading personality file:"..personalityFile)

	import(personalityFile)

	-- WE COULD EITHER 'ADD' PERSONALITY, MEANING WE COULD HAVE A SECOND FILE THAT JUST
	-- MODIFIES THE CURRENT PERSONALITY (POSSIBLY IT ONLY MODIFIES MILITARY GOALS?) OR IT
	-- COULD BE A WHOLE NEW FILE, ONE FOR EACH RACE/LOD.

	-- attempt to load map specific AI file (this can override any of the above information)
	--LoadAIScenarioFile()
end

function RandomlyChooseBuildorder(buildorder_list)
	local buildorder_count = table.getn(buildorder_list)
	--s_personality.trace("Found "..buildorder_count.." build orders")

	local valid_buildorders = 0
	local valid_buildorder_list = {}

	if (buildorder_count > 0) then
		for i=1, buildorder_count do
			-- run through all the buildorders and call its conditionals, if any return false
			-- then don't choose this buildorder
			local bSkip = false
			local bOrder = buildorder_list[i]
			
			local demand = 0
			if (bOrder.filters) then
				for k,v in pairs(bOrder.filters) do
					if (v and type(v)=="function") then
						local val = v()
						if (val<0) then
							bSkip = true
							break
						end
						demand = demand + val
					end
				end
			end
			
			--s_personality.trace("Buildorder:"..bOrder.name.." Demand:"..demand)
			
			-- if we didn't skip this build order, lets count it
			if (bSkip==false) then
				valid_buildorders = valid_buildorders+1
				valid_buildorder_list[valid_buildorders] = bOrder
			end
		end
	end

	--s_personality.trace("Valid buildorders:"..valid_buildorders)
	if valid_buildorders>0 then
		local randbuildorder = AI_RandMax(valid_buildorders)+1
		--s_personality.trace("RandBuildOrder:"..randbuildorder)
		local chosen_buildorder = valid_buildorder_list[randbuildorder]
		if chosen_buildorder then
			--s_personality.trace("Choosing buildorder "..randbuildorder.." Name:"..chosen_buildorder.name)
			
			if (chosen_buildorder.SetCustomPersonality) then
				--s_personality.trace("Build order has custom personality function. Running...")
				chosen_buildorder.SetCustomPersonality()
			end
			
			-- overrides of the defaults
			return chosen_buildorder
		--else
			--s_personality.trace("Hmm.. had buildorders to choose from, just didn't find it!")
		end
	end
end

------------------------------------------------------------------------------------

function GetPlayerAbilityTable(race, command_tree_upgrade)
	local race_table = nil
	if (AI_IsMODCoHO() == true) then
		race_table = s_player_ability_defs_coho[race]
		if (race_table~=nil) then
			local upgID = command_tree_upgrade
			return race_table[ upgID ] -- in coho we map by a hardcoded string because of some snda lobby thing
		end
	else
		race_table = s_player_ability_defs_coh[race]
		if (race_table~=nil) then
			local upgID = command_tree_upgrade
			return race_table[ BP_GetID(upgID) ] -- in coh we map by pbg
		end
	end
end

